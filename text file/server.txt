#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include<pthread>

void *server_handler (void *fd_pointer);

int main()
{
	int listenfd , connfd , *new_sock;
	socklen_t clilen;
	struct sockaddr_in cliaddr , servaddr;
	
	listenfd = socket(AF_INET,SOCK_STREAM,0);
	
	if (listenfd == -1)
	{
		perror("could not create socket\n");
	}
	
	puts("socket created");
	
	bzero(&servaddr,sizeof(servaddr));
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = INADDR_ANY;
	servaddr.sin_port = htons(8888);
	
	if (bind(listenfd,(struct sockaddr *)&servaddr,sizeof(servaddr))<0)
	{
		perror("bind failed");
		return 1;
	}
	
	puts("bind success");
	listen(listenfd, 5);
	
	puts("waiting for connection");
	clilen = sizeof(cliaddr);
	
while ((connfd = accept(listenfd,(struct sockaddr *)&cliaddr,&clilen)))
{
	puts("connection accepted");
	
	pthread_ server_thread;
	new_sock = malloc(1);
	*new_sock = connfd;
	pthread_create(&server_thread,NULL,server_handler,(void*) new_sock);
	
}


if (connfd < 0)
{
	perror("accept failed");
	return 1;
}

return 0
	
	
}





void *server_handler (void *fd_pointer)
{
	printf("hello server handler\n");
	int sock = *(int *)fd_pointer;
	int read_size , write_size;
	char *message;
	static char client_message[2000];
	message = "\nhello server handler\n";
	
	
	
	
	static int send_once = 0;
	if(send_once < 1)
	{
	 send_once++;
	}
	
	
	while((read_size == recv(sock,client_message,2000,0)) > 0)
	{
	  printf("read size %d\n", read_size);
	  write(sock,client_message,strlen(client_message));
	}
	if(read_size == 0)
	{
		puts(client disconnected);
		fflush(stdout);
	}
	else if(read_size == -1)
	{
		perror("recv failed");
	}
	free(fd_pointer) ;
	
	return 0;
}
